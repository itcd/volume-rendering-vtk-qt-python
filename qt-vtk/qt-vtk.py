"""
References
http://www.vtk.org/Wiki/VTK/Examples/Python/Widgets/EmbedPyQt2
http://web.mit.edu/16.225/dv/VTK/Wrapping/Python/vtk/qt4/QVTKRenderWindowInteractor.py
http://public.kitware.com/pipermail/vtkusers/2010-November/064086.html
http://www.vtk.org/Wiki/VTK/Examples/Python/Widgets/EmbedPyQt
"""

import sys
import vtk
from vtk.qt4.QVTKRenderWindowInteractor import QVTKRenderWindowInteractor
from vtk.util.misc import vtkGetDataRoot
from vtk.util.numpy_support import vtk_to_numpy
import xml.etree.ElementTree as ET
from PyQt4 import QtCore, QtGui, uic
from PyQt4.QtCore import QObject, pyqtSignal, pyqtSlot
from PyQt4.QtGui import QApplication, QMainWindow
import matplotlib.pyplot as plt
from transfer_function_plot import *

def get_image_filename():
    #if len(filename) < 1:
        #filename = "image.png"
    filename = "../~image.png"
    return filename

def get_volume_filename(filename = None):
    if filename is None:
	filename = str(QtGui.QFileDialog.getOpenFileName(QtGui.QWidget(), 'Select a volume data', '../data', "UNC MetaImage (*.mhd *.mha);; All Files (*)"))
	if len(filename ) < 1:
	    filename = "../data/nucleon.mhd"
    return filename

def get_transfer_function_filename(filename = None):
    if filename is None:
	filename = str(QtGui.QFileDialog.getOpenFileName(QtGui.QWidget(), 'Select a transfer function', '../transferfuncs', "Voreen transfer function (*.tfi);; All Files (*)"))
	if len(filename ) < 1:
	    filename = "../transferfuncs/nucleon.tfi"
    return filename

# Capture the display and place in a tiff
def capture_image(renWin):
    w2i = vtk.vtkWindowToImageFilter()
    #writer = vtk.vtkTIFFWriter()
    writer = vtk.vtkPNGWriter()
    w2i.SetInput(renWin)
    w2i.Update()
    writer.SetInputConnection(w2i.GetOutputPort())
    filename = get_image_filename()
    writer.SetFileName(filename)
    renWin.Render()
    writer.Write()

def check_gl_version_supported(renWin):
    extensions = vtk.vtkOpenGLExtensionManager()
    extensions.SetRenderWindow(renWin)
    print "GL_VERSION_1_2", extensions.ExtensionSupported("GL_VERSION_1_2")
    print "GL_VERSION_1_3", extensions.ExtensionSupported("GL_VERSION_1_3")
    print "GL_VERSION_1_4", extensions.ExtensionSupported("GL_VERSION_1_4")
    print "GL_VERSION_1_5", extensions.ExtensionSupported("GL_VERSION_1_5")
    print "GL_VERSION_2_0", extensions.ExtensionSupported("GL_VERSION_2_0")
    print "GL_VERSION_2_1", extensions.ExtensionSupported("GL_VERSION_2_1")
    print "GL_VERSION_3_0", extensions.ExtensionSupported("GL_VERSION_3_0")    
 
class MyMainWindow(QtGui.QMainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        
        # Set up the user interface (.ui) generated by Qt Creator
        self.ui = uic.loadUi("./ui/mainwindow.ui", self)
        
        self.vtkWidget = QVTKRenderWindowInteractor(self.ui.centralWidget)
        self.ui.verticalLayout.addWidget(self.vtkWidget)
        
        self.ren = vtk.vtkRenderer()
        self.renWin = self.vtkWidget.GetRenderWindow()
        self.vtkWidget.GetRenderWindow().AddRenderer(self.ren)
        self.iren = self.vtkWidget.GetRenderWindow().GetInteractor()   
        
	volume_filename = get_volume_filename("../data/nucleon.mhd")
        opacityTransferFunction, colorTransferFunction = load_transfer_function("../transferfuncs/nucleon.tfi")
        plot_tf(opacityTransferFunction, colorTransferFunction)
        
        # Create the reader for the data
        reader = vtk.vtkMetaImageReader()
        reader.SetFileName(volume_filename)
	self.reader = reader
        
        # The property describes how the data will look
        volumeProperty = vtk.vtkVolumeProperty()
        volumeProperty.SetColor(colorTransferFunction)
        volumeProperty.SetScalarOpacity(opacityTransferFunction)
        volumeProperty.ShadeOn()
        volumeProperty.SetInterpolationTypeToLinear()
        
        # for vtkGPUVolumeRayCastMapper
        volumeMapper = vtk.vtkGPUVolumeRayCastMapper()
        volumeMapper.SetInputConnection(reader.GetOutputPort())
        
        # The volume holds the mapper and the property and
        # can be used to position/orient the volume
        volume = vtk.vtkVolume()
        volume.SetMapper(volumeMapper)
        volume.SetProperty(volumeProperty)

        self.ren.AddVolume(volume)
        self.ren.SetBackground(1, 1, 1)
        #self.renWin.SetSize(600, 600)
        #self.renWin.Render()
        self.iren.Initialize()
        #self.iren.Start()
        check_gl_version_supported(self.renWin)
        self.ui.show()

    @pyqtSlot()
    def on_captureImageButton_clicked(self):
	capture_image(self.renWin)

    @pyqtSlot()
    def on_toNumpyButton_clicked(self):
	window = self.vtkWidget.GetRenderWindow()
	vtk_win_im = vtk.vtkWindowToImageFilter()
	vtk_win_im.SetInput(window)
	vtk_win_im.Update()
	#vtk_image = vtk_win_im.GetOutput()
	vtk_image = self.reader.GetOutput()
	height, width, depth = vtk_image.GetDimensions()
	vtk_array = vtk_image.GetPointData().GetScalars()
	components = vtk_array.GetNumberOfComponents()
	text = "height=%d width=%d depth=%d components=%d" % (height, width, depth, components)
	print text
	arr = vtk_to_numpy(vtk_array).reshape(height, width, depth)
	print arr
	arr.tofile("../nucleon.raw")

    @pyqtSlot()
    def on_loadDataButton_clicked(self):
        print "on_pushButton_clicked"
        
        path, ok = QtGui.QInputDialog.getText(self.ui, 'Input Dialog', 'Enter path of data set:', QtGui.QLineEdit.Normal, r'D:\_uchar\vortex')
        if ok:
            print path
        
        self.path = str(path)

        dir = QtCore.QDir(path)
        files = dir.entryList(['*.mhd'], QtCore.QDir.Files | QtCore.QDir.NoSymLinks)
   
        file_list = map(str, files)
        print len(file_list)
        print file_list
        
        list1 = []
        for filename in file_list:
            # Create an item with a caption
            item = QtGui.QStandardItem(filename)
            list1.append(item)
        
        self.model = QtGui.QStandardItemModel()
        self.model.clear()
        self.model.appendColumn(list1)
        self.ui.listView.setModel(self.model)
	
    def open_another_volume_and_tf(self, volume_filename, tf_filename):
	self.ui.setWindowTitle(volume_filename)
	
	opacityTransferFunction, colorTransferFunction = load_transfer_function(tf_filename)
	plot_tf(opacityTransferFunction, colorTransferFunction)	
  
	# Create the reader for the data
	reader = vtk.vtkMetaImageReader()
	reader.SetFileName(volume_filename)
	self.reader = reader
	
	# The property describes how the data will look
	volumeProperty = vtk.vtkVolumeProperty()
	volumeProperty.SetColor(colorTransferFunction)
	volumeProperty.SetScalarOpacity(opacityTransferFunction)
	volumeProperty.ShadeOn()
	volumeProperty.SetInterpolationTypeToLinear()
	
	# for vtkGPUVolumeRayCastMapper
	volumeMapper = vtk.vtkGPUVolumeRayCastMapper()
	volumeMapper.SetInputConnection(reader.GetOutputPort())
	
	# The volume holds the mapper and the property and
	# can be used to position/orient the volume
	volume = vtk.vtkVolume()
	volume.SetMapper(volumeMapper)
	volume.SetProperty(volumeProperty)
	
	self.ren = vtk.vtkRenderer()
	self.ren.AddVolume(volume)
	self.ren.SetBackground(1, 1, 1)
	
	window = self.vtkWidget.GetRenderWindow()
	collection = window.GetRenderers()
	item = collection.GetNextItem()
	while item is not None:
	    window.RemoveRenderer(item)
	    item = collection.GetNextItem()
	window.AddRenderer(self.ren)
	window.Render()
	self.iren.Initialize()

    @pyqtSlot()
    def on_actionOpen_volume_triggered(self):
	volume_filename = get_volume_filename()
	tf_filename = get_transfer_function_filename()
	print volume_filename, tf_filename
	self.open_another_volume_and_tf(volume_filename, tf_filename)

    @pyqtSlot(int)
    def on_horizontalSlider_valueChanged(self, value):
        print "on_horizontalSlider_valueChanged", value

    @pyqtSlot()
    def on_actionAbout_triggered(self):
        print "on_actionAbout_triggered"
        QtGui.QMessageBox.about(self.ui, "Python Qt Example", "This program displays a UI which is loaded from a .ui file generated by Qt Creator.")

    @pyqtSlot()
    def on_actionExit_triggered(self):
        print "on_actionExit_triggered"
        self.ui.close()
        QtGui.QApplication.quit()

    @pyqtSlot('QModelIndex')
    def on_listView_activated(self, index):
        print 'on_listView_activated'

    def append_path_separator(self, text):
        result_string = text
        separator1 = '/'
        separator2 = '\\'
        index1 = result_string.rfind(separator1)
        index2 = result_string.rfind(separator2)
        if index2 == -1:
            separator = separator1
        else:
            separator = separator2
        if index1 == -1 and index2 == -1:
            result_string = result_string + separator
        else:
            index = max(index1, index2)
            if index < len(result_string) - 1:
                result_string = result_string + separator
        #print index1, index2, result_string
        return result_string

    @pyqtSlot('QModelIndex')
    def on_listView_clicked(self, index):
        print 'on_listView_clicked'
        item = str(self.model.itemFromIndex(index).text())
	path = self.append_path_separator(self.path)
        volume_filename = path + item
	tf_filename = path + item.replace('.mhd', '.tfi')
        print volume_filename, tf_filename
	self.open_another_volume_and_tf(volume_filename, tf_filename)

if __name__ == "__main__":
    print sys.argv[0]
    print __file__
    app = QtGui.QApplication(sys.argv)
    window = MyMainWindow() 
    sys.exit(app.exec_())
